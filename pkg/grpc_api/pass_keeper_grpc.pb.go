// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: pass_keeper.proto

package grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PassKeeper_RegisterUser_FullMethodName         = "/pass.keeper.PassKeeper/RegisterUser"
	PassKeeper_AuthUser_FullMethodName             = "/pass.keeper.PassKeeper/AuthUser"
	PassKeeper_AddDataLoginPass_FullMethodName     = "/pass.keeper.PassKeeper/AddDataLoginPass"
	PassKeeper_GetDataLoginPassList_FullMethodName = "/pass.keeper.PassKeeper/GetDataLoginPassList"
	PassKeeper_GetDataLoginPass_FullMethodName     = "/pass.keeper.PassKeeper/GetDataLoginPass"
	PassKeeper_AddDataText_FullMethodName          = "/pass.keeper.PassKeeper/AddDataText"
	PassKeeper_GetDataTextList_FullMethodName      = "/pass.keeper.PassKeeper/GetDataTextList"
	PassKeeper_GetDataText_FullMethodName          = "/pass.keeper.PassKeeper/GetDataText"
	PassKeeper_AddDataCard_FullMethodName          = "/pass.keeper.PassKeeper/AddDataCard"
	PassKeeper_GetDataCardList_FullMethodName      = "/pass.keeper.PassKeeper/GetDataCardList"
	PassKeeper_GetDataCard_FullMethodName          = "/pass.keeper.PassKeeper/GetDataCard"
	PassKeeper_AddDataBinary_FullMethodName        = "/pass.keeper.PassKeeper/AddDataBinary"
	PassKeeper_AddDataBinaryTitle_FullMethodName   = "/pass.keeper.PassKeeper/AddDataBinaryTitle"
)

// PassKeeperClient is the client API for PassKeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassKeeperClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AuthUserResponse, error)
	AddDataLoginPass(ctx context.Context, in *AddDataLoginPassRequest, opts ...grpc.CallOption) (*AddDataResponse, error)
	GetDataLoginPassList(ctx context.Context, in *GetDataListRequest, opts ...grpc.CallOption) (*GetDataListResponse, error)
	GetDataLoginPass(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataLoginPassResponse, error)
	AddDataText(ctx context.Context, in *AddDataTextRequest, opts ...grpc.CallOption) (*AddDataResponse, error)
	GetDataTextList(ctx context.Context, in *GetDataListRequest, opts ...grpc.CallOption) (*GetDataListResponse, error)
	GetDataText(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataTextResponse, error)
	AddDataCard(ctx context.Context, in *AddDataCardRequest, opts ...grpc.CallOption) (*AddDataResponse, error)
	GetDataCardList(ctx context.Context, in *GetDataListRequest, opts ...grpc.CallOption) (*GetDataListResponse, error)
	GetDataCard(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataCardResponse, error)
	AddDataBinary(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AddDataBinaryRequest, AddDataResponse], error)
	AddDataBinaryTitle(ctx context.Context, in *AddDataBinaryTitleRequest, opts ...grpc.CallOption) (*AddDataResponse, error)
}

type passKeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewPassKeeperClient(cc grpc.ClientConnInterface) PassKeeperClient {
	return &passKeeperClient{cc}
}

func (c *passKeeperClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, PassKeeper_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passKeeperClient) AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AuthUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthUserResponse)
	err := c.cc.Invoke(ctx, PassKeeper_AuthUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passKeeperClient) AddDataLoginPass(ctx context.Context, in *AddDataLoginPassRequest, opts ...grpc.CallOption) (*AddDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDataResponse)
	err := c.cc.Invoke(ctx, PassKeeper_AddDataLoginPass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passKeeperClient) GetDataLoginPassList(ctx context.Context, in *GetDataListRequest, opts ...grpc.CallOption) (*GetDataListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataListResponse)
	err := c.cc.Invoke(ctx, PassKeeper_GetDataLoginPassList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passKeeperClient) GetDataLoginPass(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataLoginPassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataLoginPassResponse)
	err := c.cc.Invoke(ctx, PassKeeper_GetDataLoginPass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passKeeperClient) AddDataText(ctx context.Context, in *AddDataTextRequest, opts ...grpc.CallOption) (*AddDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDataResponse)
	err := c.cc.Invoke(ctx, PassKeeper_AddDataText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passKeeperClient) GetDataTextList(ctx context.Context, in *GetDataListRequest, opts ...grpc.CallOption) (*GetDataListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataListResponse)
	err := c.cc.Invoke(ctx, PassKeeper_GetDataTextList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passKeeperClient) GetDataText(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataTextResponse)
	err := c.cc.Invoke(ctx, PassKeeper_GetDataText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passKeeperClient) AddDataCard(ctx context.Context, in *AddDataCardRequest, opts ...grpc.CallOption) (*AddDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDataResponse)
	err := c.cc.Invoke(ctx, PassKeeper_AddDataCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passKeeperClient) GetDataCardList(ctx context.Context, in *GetDataListRequest, opts ...grpc.CallOption) (*GetDataListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataListResponse)
	err := c.cc.Invoke(ctx, PassKeeper_GetDataCardList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passKeeperClient) GetDataCard(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataCardResponse)
	err := c.cc.Invoke(ctx, PassKeeper_GetDataCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passKeeperClient) AddDataBinary(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AddDataBinaryRequest, AddDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PassKeeper_ServiceDesc.Streams[0], PassKeeper_AddDataBinary_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AddDataBinaryRequest, AddDataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PassKeeper_AddDataBinaryClient = grpc.ClientStreamingClient[AddDataBinaryRequest, AddDataResponse]

func (c *passKeeperClient) AddDataBinaryTitle(ctx context.Context, in *AddDataBinaryTitleRequest, opts ...grpc.CallOption) (*AddDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDataResponse)
	err := c.cc.Invoke(ctx, PassKeeper_AddDataBinaryTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassKeeperServer is the server API for PassKeeper service.
// All implementations must embed UnimplementedPassKeeperServer
// for forward compatibility.
type PassKeeperServer interface {
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	AuthUser(context.Context, *AuthUserRequest) (*AuthUserResponse, error)
	AddDataLoginPass(context.Context, *AddDataLoginPassRequest) (*AddDataResponse, error)
	GetDataLoginPassList(context.Context, *GetDataListRequest) (*GetDataListResponse, error)
	GetDataLoginPass(context.Context, *GetDataRequest) (*GetDataLoginPassResponse, error)
	AddDataText(context.Context, *AddDataTextRequest) (*AddDataResponse, error)
	GetDataTextList(context.Context, *GetDataListRequest) (*GetDataListResponse, error)
	GetDataText(context.Context, *GetDataRequest) (*GetDataTextResponse, error)
	AddDataCard(context.Context, *AddDataCardRequest) (*AddDataResponse, error)
	GetDataCardList(context.Context, *GetDataListRequest) (*GetDataListResponse, error)
	GetDataCard(context.Context, *GetDataRequest) (*GetDataCardResponse, error)
	AddDataBinary(grpc.ClientStreamingServer[AddDataBinaryRequest, AddDataResponse]) error
	AddDataBinaryTitle(context.Context, *AddDataBinaryTitleRequest) (*AddDataResponse, error)
	mustEmbedUnimplementedPassKeeperServer()
}

// UnimplementedPassKeeperServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPassKeeperServer struct{}

func (UnimplementedPassKeeperServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedPassKeeperServer) AuthUser(context.Context, *AuthUserRequest) (*AuthUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUser not implemented")
}
func (UnimplementedPassKeeperServer) AddDataLoginPass(context.Context, *AddDataLoginPassRequest) (*AddDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDataLoginPass not implemented")
}
func (UnimplementedPassKeeperServer) GetDataLoginPassList(context.Context, *GetDataListRequest) (*GetDataListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataLoginPassList not implemented")
}
func (UnimplementedPassKeeperServer) GetDataLoginPass(context.Context, *GetDataRequest) (*GetDataLoginPassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataLoginPass not implemented")
}
func (UnimplementedPassKeeperServer) AddDataText(context.Context, *AddDataTextRequest) (*AddDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDataText not implemented")
}
func (UnimplementedPassKeeperServer) GetDataTextList(context.Context, *GetDataListRequest) (*GetDataListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataTextList not implemented")
}
func (UnimplementedPassKeeperServer) GetDataText(context.Context, *GetDataRequest) (*GetDataTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataText not implemented")
}
func (UnimplementedPassKeeperServer) AddDataCard(context.Context, *AddDataCardRequest) (*AddDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDataCard not implemented")
}
func (UnimplementedPassKeeperServer) GetDataCardList(context.Context, *GetDataListRequest) (*GetDataListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataCardList not implemented")
}
func (UnimplementedPassKeeperServer) GetDataCard(context.Context, *GetDataRequest) (*GetDataCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataCard not implemented")
}
func (UnimplementedPassKeeperServer) AddDataBinary(grpc.ClientStreamingServer[AddDataBinaryRequest, AddDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AddDataBinary not implemented")
}
func (UnimplementedPassKeeperServer) AddDataBinaryTitle(context.Context, *AddDataBinaryTitleRequest) (*AddDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDataBinaryTitle not implemented")
}
func (UnimplementedPassKeeperServer) mustEmbedUnimplementedPassKeeperServer() {}
func (UnimplementedPassKeeperServer) testEmbeddedByValue()                    {}

// UnsafePassKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassKeeperServer will
// result in compilation errors.
type UnsafePassKeeperServer interface {
	mustEmbedUnimplementedPassKeeperServer()
}

func RegisterPassKeeperServer(s grpc.ServiceRegistrar, srv PassKeeperServer) {
	// If the following call pancis, it indicates UnimplementedPassKeeperServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PassKeeper_ServiceDesc, srv)
}

func _PassKeeper_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassKeeperServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassKeeper_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassKeeperServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassKeeper_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassKeeperServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassKeeper_AuthUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassKeeperServer).AuthUser(ctx, req.(*AuthUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassKeeper_AddDataLoginPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDataLoginPassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassKeeperServer).AddDataLoginPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassKeeper_AddDataLoginPass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassKeeperServer).AddDataLoginPass(ctx, req.(*AddDataLoginPassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassKeeper_GetDataLoginPassList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassKeeperServer).GetDataLoginPassList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassKeeper_GetDataLoginPassList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassKeeperServer).GetDataLoginPassList(ctx, req.(*GetDataListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassKeeper_GetDataLoginPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassKeeperServer).GetDataLoginPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassKeeper_GetDataLoginPass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassKeeperServer).GetDataLoginPass(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassKeeper_AddDataText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDataTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassKeeperServer).AddDataText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassKeeper_AddDataText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassKeeperServer).AddDataText(ctx, req.(*AddDataTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassKeeper_GetDataTextList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassKeeperServer).GetDataTextList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassKeeper_GetDataTextList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassKeeperServer).GetDataTextList(ctx, req.(*GetDataListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassKeeper_GetDataText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassKeeperServer).GetDataText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassKeeper_GetDataText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassKeeperServer).GetDataText(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassKeeper_AddDataCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDataCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassKeeperServer).AddDataCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassKeeper_AddDataCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassKeeperServer).AddDataCard(ctx, req.(*AddDataCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassKeeper_GetDataCardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassKeeperServer).GetDataCardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassKeeper_GetDataCardList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassKeeperServer).GetDataCardList(ctx, req.(*GetDataListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassKeeper_GetDataCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassKeeperServer).GetDataCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassKeeper_GetDataCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassKeeperServer).GetDataCard(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassKeeper_AddDataBinary_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PassKeeperServer).AddDataBinary(&grpc.GenericServerStream[AddDataBinaryRequest, AddDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PassKeeper_AddDataBinaryServer = grpc.ClientStreamingServer[AddDataBinaryRequest, AddDataResponse]

func _PassKeeper_AddDataBinaryTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDataBinaryTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassKeeperServer).AddDataBinaryTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassKeeper_AddDataBinaryTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassKeeperServer).AddDataBinaryTitle(ctx, req.(*AddDataBinaryTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PassKeeper_ServiceDesc is the grpc.ServiceDesc for PassKeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PassKeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pass.keeper.PassKeeper",
	HandlerType: (*PassKeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _PassKeeper_RegisterUser_Handler,
		},
		{
			MethodName: "AuthUser",
			Handler:    _PassKeeper_AuthUser_Handler,
		},
		{
			MethodName: "AddDataLoginPass",
			Handler:    _PassKeeper_AddDataLoginPass_Handler,
		},
		{
			MethodName: "GetDataLoginPassList",
			Handler:    _PassKeeper_GetDataLoginPassList_Handler,
		},
		{
			MethodName: "GetDataLoginPass",
			Handler:    _PassKeeper_GetDataLoginPass_Handler,
		},
		{
			MethodName: "AddDataText",
			Handler:    _PassKeeper_AddDataText_Handler,
		},
		{
			MethodName: "GetDataTextList",
			Handler:    _PassKeeper_GetDataTextList_Handler,
		},
		{
			MethodName: "GetDataText",
			Handler:    _PassKeeper_GetDataText_Handler,
		},
		{
			MethodName: "AddDataCard",
			Handler:    _PassKeeper_AddDataCard_Handler,
		},
		{
			MethodName: "GetDataCardList",
			Handler:    _PassKeeper_GetDataCardList_Handler,
		},
		{
			MethodName: "GetDataCard",
			Handler:    _PassKeeper_GetDataCard_Handler,
		},
		{
			MethodName: "AddDataBinaryTitle",
			Handler:    _PassKeeper_AddDataBinaryTitle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddDataBinary",
			Handler:       _PassKeeper_AddDataBinary_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pass_keeper.proto",
}
